#
# Ubuntu 20 + ROS noetic + Moveit! + Cuda 11.7.1
#
FROM nvidia/cuda:11.7.1-devel-ubuntu20.04
LABEL maintainer="Mohamed Abdelkader <mohamedashraf123@gmail.com>"

ENV DEBIAN_FRONTEND noninteractive
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO noetic

# All apt-get commands start with an update, then install
# and finally, a cache cleanup to keep the image size small.

RUN apt-get update && apt-get -y --quiet --no-install-recommends install \
		gedit \
		nano \
		bzip2 \
		ca-certificates \
		ccache \
		cmake \
		cppcheck \
		curl \
		dirmngr \
		doxygen \
		file \
		g++ \
		gcc \
		gdb \
		git \
		gnupg \
		gosu \
		lcov \
		libfreetype6-dev \
		libgtest-dev \
		libpng-dev \
		libssl-dev \
		lsb-release \
		make \
		ninja-build \
        openjdk-8-jdk \
		openjdk-8-jre \
		openssh-client \
		pkg-config \
		python3-dev \
		python3-pip \
		rsync \
		shellcheck \
		tzdata \
		unzip \
		valgrind \
		wget \
		xsltproc \
		zip \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#
# Insatll VS Code for easy code development
#
RUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg && \
	install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg && \
	sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list' && \
	rm -f packages.microsoft.gpg
RUN apt-get update && apt-get -y --quiet --no-install-recommends install \
    apt-transport-https \
	code \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Python 3 pip build dependencies first.
RUN python3 -m pip install --upgrade pip wheel setuptools

# Python 3 dependencies installed by pip
RUN python3 -m pip install argparse argcomplete coverage cerberus empy jinja2 kconfiglib \
		matplotlib==3.0.* numpy nunavut>=1.1.0 packaging pkgconfig pyros-genmsg pyulog \
		pyyaml requests serial six toml psutil pyulog wheel jsonschema pynacl

# setup virtual X server
RUN mkdir /tmp/.X11-unix && \
	chmod 1777 /tmp/.X11-unix && \
	chown -R root:root /tmp/.X11-unix
ENV DISPLAY :99

ENV TERM=xterm
ENV TZ=UTC

# CUDA
RUN echo "export PATH=\$PATH:\$HOME/.local/bin:\$HOME/.local/bin" >> $HOME/.bashrc
RUN echo "export PATH=\$PATH:/usr/local/cuda-11.7/bin" >> $HOME/.bashrc
RUN echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/usr/local/cuda-11.7/lib64:/usr/local/cuda-11.7/targets/x86_64-linux/lib/:/usr/local/cuda/extras/CUPTI/lib64/" >> $HOME/.bashrc
RUN echo "export CUDA_HOME=/usr/local/cuda" >> $HOME/.bashrc

#
# Install Gazebo
#
RUN wget --quiet http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \
	&& sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -sc` main" > /etc/apt/sources.list.d/gazebo-stable.list' \
	&& apt-get update \
	&& DEBIAN_FRONTEND=noninteractive apt-get -y --quiet --no-install-recommends install \
        software-properties-common \
        apt-utils \
		ant \
		binutils \
		bc \
		net-tools \
		bash-completion \
		dirmngr \
		gazebo11 \
		gstreamer1.0-plugins-bad \
		gstreamer1.0-plugins-base \
		gstreamer1.0-plugins-good \
		gstreamer1.0-plugins-ugly \
		libeigen3-dev \
		libgazebo11-dev \
		libgstreamer-plugins-base1.0-dev \
		libimage-exiftool-perl \
		libopencv-dev \
		libxml2-utils \
		mesa-utils \
		protobuf-compiler \
		x-window-system \
		ignition-edifice \
        xmlstarlet \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Some QT-Apps/Gazebo don't not show controls without this
ENV QT_X11_NO_MITSHM 1

#
# Instal ROS noetic
#
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list' \
	&& sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list' \
	&& sh -c 'echo "deb http://packages.ros.org/ros-shadow-fixed/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-shadow.list' \
	&& apt-get update \
	&& apt-get -y --quiet --no-install-recommends install \
		geographiclib-tools \
		libeigen3-dev \
		libgeographic-dev \
		libopencv-dev \
		libyaml-cpp-dev \
		python3-rosdep \
		python3-catkin-tools \
		python3-catkin-lint \
		ros-$ROS_DISTRO-gazebo-ros-pkgs \
		ros-$ROS_DISTRO-octomap \
		ros-$ROS_DISTRO-octomap-msgs \
		ros-$ROS_DISTRO-pcl-conversions \
		ros-$ROS_DISTRO-pcl-msgs \
		ros-$ROS_DISTRO-pcl-ros \
		ros-$ROS_DISTRO-ros-base \
		ros-$ROS_DISTRO-rostest \
		ros-$ROS_DISTRO-rosunit \
        ros-$ROS_DISTRO-tf-conversions \
        ros-$ROS_DISTRO-rqt-tf-tree \
		ros-$ROS_DISTRO-rviz \
        ros-${ROS_DISTRO}-moveit \
		ros-$ROS_DISTRO-controller-manager \
		ros-$ROS_DISTRO-effort-controllers \
		ros-$ROS_DISTRO-gazebo-ros-control \
		ros-$ROS_DISTRO-joint-state-controller \
		ros-$ROS_DISTRO-joint-trajectory-controller \
		ros-$ROS_DISTRO-position-controllers \
		ros-$ROS_DISTRO-robot-state-publisher \
		ros-$ROS_DISTRO-joint-state-publisher \
		ros-$ROS_DISTRO-joint-state-publisher-gui \
		ros-$ROS_DISTRO-warehouse-ros-mongo \
		ros-$ROS_DISTRO-trac-ik-kinematics-plugin \
		xvfb \
	&& geographiclib-get-geoids egm96-5 \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*



RUN pip3 install -U \
		osrf-pycommon

# bootstrap rosdep
RUN rosdep init && rosdep update

# create user with id 1001 (jenkins docker workflow default)
RUN useradd --shell /bin/bash -u 1000 -c "" -m user && usermod -a -G dialout user && echo "user:user" | chpasswd && adduser user sudo

RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /home/user/.bashrc


# Auto completion in terminal
RUN apt-get -y --quiet --no-install-recommends install bash-completion \
    && apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

RUN echo "source /etc/profile.d/bash_completion.sh" >> $HOME/.bashrc

# Link python command to python3
RUN apt install -y python-is-python3

RUN echo "export GAZEBO_PLUGIN_PATH=\$GAZEBO_PLUGIN_PATH:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins" >> ${HOME}/.bashrc

#
# Install yolov8 dependencies
# 
RUN pip3 install opencv-python==4.8.0.76
RUN pip3 install ultralytics==8.0.162
# RUN pip3 install Cython
RUN pip3 install --ignore-installed Cython
RUN pip3 install lapx>=0.5.2

# create and start as LOCAL_USER_ID
COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

WORKDIR /home/user

CMD ["/bin/bash"]